================================================================================
nil
================================================================================

exp(nil)

--------------------------------------------------------------------------------

(chunk
  (function_call
    name: (identifier)
    arguments: (arguments
      (nil))))

================================================================================
false
================================================================================

exp(false)

--------------------------------------------------------------------------------

(chunk
  (function_call
    name: (identifier)
    arguments: (arguments
      (boolean))))

================================================================================
true
================================================================================

exp(true)

--------------------------------------------------------------------------------

(chunk
  (function_call
    name: (identifier)
    arguments: (arguments
      (boolean))))

================================================================================
number
================================================================================

exp(
  3,
  345,
  0xff,
  0xBEBADA,
  3.0,
  3.1416,
  314.16e-2,
  0.31416E1,
  34e1,
  0x0.1E,
  0xA23p-4,
  0X1.921FB54442D18P+1
)

--------------------------------------------------------------------------------

(chunk
  (function_call
    name: (identifier)
    arguments: (arguments
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number))))

================================================================================
string
================================================================================

exp(
  "string",
  'string',
  "a\
  b",
  'a\z',
  'a\z
  ',
  'a\z
  b',
  "'a\z\
  b'",
  "c",
  'c',
  "0",
  [[ string ]],
  [[
    string
    string
  ]],
  [=[
    string
    string
  ]=],
  [=[[string]]=],
  [=[
    [string]
  ]=],
  [=[
    [string
  ]=],
  [=[
    string]
  ]=],
  [=[
    [[string
  ]=],
  [=[
    string]]
  ]=]
)


--------------------------------------------------------------------------------

(chunk
  (function_call
    (identifier)
    (arguments
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content)
        (escape_sequence)
        (string_content))
      (string
        (string_content)
        (escape_sequence))
      (string
        (string_content)
        (escape_sequence)
        (string_content))
      (string
        (string_content)
        (escape_sequence)
        (string_content))
      (string
        (string_content)
        (escape_sequence)
        (escape_sequence)
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content))
      (string
        (string_content)))))

================================================================================
vararg_expression
================================================================================

exp(...)

--------------------------------------------------------------------------------

(chunk
  (function_call
    name: (identifier)
    arguments: (arguments
      (vararg_expression))))

================================================================================
function_definition
================================================================================

f1 = function() end

f2 = function() return end

f3 = function(...)
  return ...
end

f4 = function(a1, ...)
  print(...)
  return a1
end

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (function_definition
        parameters: (parameters))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (function_definition
        parameters: (parameters)
        body: (block
          (return_statement)))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (function_definition
        parameters: (parameters
          (vararg_expression))
        body: (block
          (return_statement
            (expression_list
              (vararg_expression)))))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (function_definition
        parameters: (parameters
          name: (identifier)
          (vararg_expression))
        body: (block
          (function_call
            name: (identifier)
            arguments: (arguments
              (vararg_expression)))
          (return_statement
            (expression_list
              (identifier))))))))

================================================================================
variable ::: identifier
================================================================================

v1 = n1

v2, v3 = n2, n3

à¦ªà¦¾à¦‡ = Ï€

ðŸ™‚ = ðŸ™ƒ

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (identifier)))
  (assignment_statement
    (variable_list
      name: (identifier)
      name: (identifier))
    (expression_list
      value: (identifier)
      value: (identifier)))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (identifier)))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (identifier))))

================================================================================
variable ::: bracket_index_expression
================================================================================

v1 = tbl[k1]

v2, v3[v] = tbl[k1]["k2"]

v4 = tbk[getK1()][getK2()]

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (bracket_index_expression
        (identifier)
        (identifier))))
  (assignment_statement
    (variable_list
      (identifier)
      (bracket_index_expression
        (identifier)
        (identifier)))
    (expression_list
      (bracket_index_expression
        (bracket_index_expression
          (identifier)
          (identifier))
        (string
          (string_content)))))
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (bracket_index_expression
        (bracket_index_expression
          (identifier)
          (function_call
            (identifier)
            (arguments)))
        (function_call
          (identifier)
          (arguments))))))

================================================================================
variable ::: dot_index_expression
================================================================================

v1 = tbl.k1

v2 = tbl.k1.k2

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (dot_index_expression
        table: (identifier)
        field: (identifier))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (dot_index_expression
        table: (dot_index_expression
          table: (identifier)
          field: (identifier))
        field: (identifier)))))

================================================================================
function_call ::: bracket_index_expression | dot_index_expression
================================================================================

v1 = tbl[k1].k2(a1, "a2", a3())

v2 = tbl[k1] { f1 = true }

v3 = tbl[k1] "a1"

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_call
        (dot_index_expression
          (bracket_index_expression
            (identifier)
            (identifier))
          (identifier))
        (arguments
          (identifier)
          (string
            (string_content))
          (function_call
            (identifier)
            (arguments))))))
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_call
        (bracket_index_expression
          (identifier)
          (identifier))
        (arguments
          (table_constructor
            (field
              (identifier)
              (boolean)))))))
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_call
        (bracket_index_expression
          (identifier)
          (identifier))
        (arguments
          (string
            (string_content)))))))

================================================================================
function_call ::: method_index_expression
================================================================================

tbl.k1:m1(a1, "a2")

tbl[k1]:m1 { f1, "f2" }

tbl:m1 "a1"

--------------------------------------------------------------------------------

(chunk
  (function_call
    (method_index_expression
      (dot_index_expression
        (identifier)
        (identifier))
      (identifier))
    (arguments
      (identifier)
      (string
        (string_content))))
  (function_call
    (method_index_expression
      (bracket_index_expression
        (identifier)
        (identifier))
      (identifier))
    (arguments
      (table_constructor
        (field
          (identifier))
        (field
          (string
            (string_content))))))
  (function_call
    (method_index_expression
      (identifier)
      (identifier))
    (arguments
      (string
        (string_content)))))

================================================================================
parenthesized_expression
================================================================================

v = ( true )

v = ( ( false ) )

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (parenthesized_expression
        (boolean))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (parenthesized_expression
        (parenthesized_expression
          (boolean))))))

================================================================================
table_constructor
================================================================================

tbl1 = {
  ["k1"] = {
    ['k2'] = true,
    k3 = false
  }
}

local tbl2 = {
  k1 = {
    { 'v1', "v2" }
  }
}

local tbl3 = { "v1", k1 = "v2" }

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (table_constructor
        (field
          (string
            (string_content))
          (table_constructor
            (field
              (string
                (string_content))
              (boolean))
            (field
              (identifier)
              (boolean)))))))
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (table_constructor
          (field
            (identifier)
            (table_constructor
              (field
                (table_constructor
                  (field
                    (string
                      (string_content)))
                  (field
                    (string
                      (string_content)))))))))))
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (table_constructor
          (field
            (string
              (string_content)))
          (field
            (identifier)
            (string
              (string_content))))))))

================================================================================
binary_expression
================================================================================

a = i + j * 3 - k % 5

b = i + j % 3 ^ 2

c = i * 2 ^ j

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (binary_expression
        left: (binary_expression
          left: (identifier)
          right: (binary_expression
            left: (identifier)
            right: (number)))
        right: (binary_expression
          left: (identifier)
          right: (number)))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (binary_expression
        left: (identifier)
        right: (binary_expression
          left: (identifier)
          right: (binary_expression
            left: (number)
            right: (number))))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (binary_expression
        left: (identifier)
        right: (binary_expression
          left: (number)
          right: (identifier))))))

================================================================================
unary_expression
================================================================================

v1 = #l

v2 = -n

v3 = not c1 and r1 or r2

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (unary_expression
        operand: (identifier))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (unary_expression
        operand: (identifier))))
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (binary_expression
        left: (binary_expression
          left: (unary_expression
            operand: (identifier))
          right: (identifier))
        right: (identifier)))))
